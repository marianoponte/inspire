[{"C:\\Users\\Ponte\\Documents\\Proyecto Final Python\\inspire\\inspire-frontend\\src\\index.js":"1","C:\\Users\\Ponte\\Documents\\Proyecto Final Python\\inspire\\inspire-frontend\\src\\App.js":"2","C:\\Users\\Ponte\\Documents\\Proyecto Final Python\\inspire\\inspire-frontend\\src\\reportWebVitals.js":"3","C:\\Users\\Ponte\\Documents\\Proyecto Final Python\\inspire\\inspire-frontend\\src\\components\\layouts\\NavbarMain.js":"4","C:\\Users\\Ponte\\Documents\\Proyecto Final Python\\inspire\\inspire-frontend\\src\\components\\pages\\NotFound.js":"5","C:\\Users\\Ponte\\Documents\\Proyecto Final Python\\inspire\\inspire-frontend\\src\\components\\members\\EditMember.js":"6","C:\\Users\\Ponte\\Documents\\Proyecto Final Python\\inspire\\inspire-frontend\\src\\components\\members\\MembersTable.js":"7","C:\\Users\\Ponte\\Documents\\Proyecto Final Python\\inspire\\inspire-frontend\\src\\components\\pages\\Home.js":"8","C:\\Users\\Ponte\\Documents\\Proyecto Final Python\\inspire\\inspire-frontend\\src\\components\\members\\AddMember.js":"9","C:\\Users\\Ponte\\Documents\\Proyecto Final Python\\inspire\\inspire-frontend\\src\\components\\pages\\Login.js":"10","C:\\Users\\Ponte\\Documents\\Proyecto Final Python\\inspire\\inspire-frontend\\src\\components\\transactions\\TransactionsTab.js":"11","C:\\Users\\Ponte\\Documents\\Proyecto Final Python\\inspire\\inspire-frontend\\src\\components\\vouchers\\VouchersTab.js":"12","C:\\Users\\Ponte\\Documents\\Proyecto Final Python\\inspire\\inspire-frontend\\src\\components\\transactions\\EditTransaction.js":"13","C:\\Users\\Ponte\\Documents\\Proyecto Final Python\\inspire\\inspire-frontend\\src\\components\\products\\ProductsTable.js":"14","C:\\Users\\Ponte\\Documents\\Proyecto Final Python\\inspire\\inspire-frontend\\src\\components\\vouchers\\EditVoucher.js":"15","C:\\Users\\Ponte\\Documents\\Proyecto Final Python\\inspire\\inspire-frontend\\src\\components\\pages\\LogOut.js":"16","C:\\Users\\Ponte\\Documents\\Proyecto Final Python\\inspire\\inspire-frontend\\src\\components\\members\\MemberTrades.js":"17","C:\\Users\\Ponte\\Documents\\Proyecto Final Python\\inspire\\inspire-frontend\\src\\components\\members\\MemberTransactions.js":"18","C:\\Users\\Ponte\\Documents\\Proyecto Final Python\\inspire\\inspire-frontend\\src\\components\\members\\MemberVouchers.js":"19","C:\\Users\\Ponte\\Documents\\Proyecto Final Python\\inspire\\inspire-frontend\\src\\components\\members\\SearchMember.js":"20","C:\\Users\\Ponte\\Documents\\Proyecto Final Python\\inspire\\inspire-frontend\\src\\components\\transactions\\SearchTransaction.js":"21","C:\\Users\\Ponte\\Documents\\Proyecto Final Python\\inspire\\inspire-frontend\\src\\components\\transactions\\TransactionsTable.js":"22","C:\\Users\\Ponte\\Documents\\Proyecto Final Python\\inspire\\inspire-frontend\\src\\components\\pages\\Register.js":"23","C:\\Users\\Ponte\\Documents\\Proyecto Final Python\\inspire\\inspire-frontend\\src\\components\\products\\Producto.js":"24","C:\\Users\\Ponte\\Documents\\Proyecto Final Python\\inspire\\inspire-frontend\\src\\components\\transactions\\AddTransaction.js":"25","C:\\Users\\Ponte\\Documents\\Proyecto Final Python\\inspire\\inspire-frontend\\src\\components\\vouchers\\VouchersTable.js":"26","C:\\Users\\Ponte\\Documents\\Proyecto Final Python\\inspire\\inspire-frontend\\src\\utils\\Utils.js":"27","C:\\Users\\Ponte\\Documents\\Proyecto Final Python\\inspire\\inspire-frontend\\src\\components\\canje\\Canje.js":"28","C:\\Users\\Ponte\\Documents\\Proyecto Final Python\\inspire\\inspire-frontend\\src\\components\\products\\AddProduct.js":"29","C:\\Users\\Ponte\\Documents\\Proyecto Final Python\\inspire\\inspire-frontend\\src\\components\\products\\DeleteProduct.js":"30"},{"size":517,"mtime":1614066141530,"results":"31","hashOfConfig":"32"},{"size":1863,"mtime":1614138041824,"results":"33","hashOfConfig":"32"},{"size":375,"mtime":1613514360404,"results":"34","hashOfConfig":"32"},{"size":1694,"mtime":1614182209646,"results":"35","hashOfConfig":"32"},{"size":1623,"mtime":1614182129489,"results":"36","hashOfConfig":"32"},{"size":8729,"mtime":1614185401180,"results":"37","hashOfConfig":"32"},{"size":5315,"mtime":1614182949536,"results":"38","hashOfConfig":"32"},{"size":3835,"mtime":1614142915193,"results":"39","hashOfConfig":"32"},{"size":4738,"mtime":1614147790785,"results":"40","hashOfConfig":"32"},{"size":3652,"mtime":1614182147286,"results":"41","hashOfConfig":"32"},{"size":3431,"mtime":1614183840066,"results":"42","hashOfConfig":"32"},{"size":2922,"mtime":1614184064567,"results":"43","hashOfConfig":"32"},{"size":5588,"mtime":1614146892543,"results":"44","hashOfConfig":"32"},{"size":2980,"mtime":1614185902868,"results":"45","hashOfConfig":"32"},{"size":4961,"mtime":1614142973653,"results":"46","hashOfConfig":"32"},{"size":858,"mtime":1613946866114,"results":"47","hashOfConfig":"32"},{"size":799,"mtime":1613942428537,"results":"48","hashOfConfig":"32"},{"size":771,"mtime":1613890835424,"results":"49","hashOfConfig":"32"},{"size":710,"mtime":1613974090417,"results":"50","hashOfConfig":"32"},{"size":722,"mtime":1614152642252,"results":"51","hashOfConfig":"32"},{"size":423,"mtime":1613792353387,"results":"52","hashOfConfig":"32"},{"size":1799,"mtime":1614126758029,"results":"53","hashOfConfig":"32"},{"size":4890,"mtime":1614114401807,"results":"54","hashOfConfig":"32"},{"size":958,"mtime":1614147480750,"results":"55","hashOfConfig":"32"},{"size":8146,"mtime":1614146525683,"results":"56","hashOfConfig":"32"},{"size":1639,"mtime":1614135422404,"results":"57","hashOfConfig":"32"},{"size":137,"mtime":1613897765531,"results":"58","hashOfConfig":"32"},{"size":4673,"mtime":1614147450370,"results":"59","hashOfConfig":"32"},{"size":3468,"mtime":1614182346534,"results":"60","hashOfConfig":"32"},{"size":1284,"mtime":1614147679069,"results":"61","hashOfConfig":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},"svcau3",{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"64"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"64"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"64"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"64"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"64"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"64"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"64"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"64"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"64"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"64"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"64"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"64"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"64"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"64"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"64"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"64"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"64"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"137"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"64"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"64"},"C:\\Users\\Ponte\\Documents\\Proyecto Final Python\\inspire\\inspire-frontend\\src\\index.js",[],["144","145"],"C:\\Users\\Ponte\\Documents\\Proyecto Final Python\\inspire\\inspire-frontend\\src\\App.js",[],"C:\\Users\\Ponte\\Documents\\Proyecto Final Python\\inspire\\inspire-frontend\\src\\reportWebVitals.js",[],"C:\\Users\\Ponte\\Documents\\Proyecto Final Python\\inspire\\inspire-frontend\\src\\components\\layouts\\NavbarMain.js",[],"C:\\Users\\Ponte\\Documents\\Proyecto Final Python\\inspire\\inspire-frontend\\src\\components\\pages\\NotFound.js",["146","147","148","149","150"],"import React, { useEffect } from 'react';\r\nimport '../../stylesheets/notfound.css';\r\n\r\nconst NotFound = () => {\r\n\r\n    useEffect(() => {\r\n        document.getElementById('navigation-bar').style.display = \"none\"; }, [])\r\n        \r\n    return (\r\n        <body class=\"bg-purple\">\r\n            <div class=\"stars\">\r\n                <div class=\"central-body\">\r\n                    <img class=\"image-404\" src=\"http://salehriaz.com/404Page/img/404.svg\" width=\"300px\" />\r\n                    <a href=\"/home\" class=\"btn-go-home\">VOLVER AL INICIO</a>\r\n                </div>\r\n                <div class=\"objects\">\r\n                    <img class=\"object_rocket\" src=\"http://salehriaz.com/404Page/img/rocket.svg\" width=\"40px\" />\r\n                    <div class=\"earth-moon\">\r\n                        <img class=\"object_earth\" src=\"http://salehriaz.com/404Page/img/earth.svg\" width=\"100px\" />\r\n                        <img class=\"object_moon\" src=\"http://salehriaz.com/404Page/img/moon.svg\" width=\"80px\" />\r\n                    </div>\r\n                    <div class=\"box_astronaut\">\r\n                        <img class=\"object_astronaut\" src=\"http://salehriaz.com/404Page/img/astronaut.svg\" width=\"140px\" />\r\n                    </div>\r\n                </div>\r\n                <div class=\"glowing_stars\">\r\n                    <div class=\"star\"></div>\r\n                    <div class=\"star\"></div>\r\n                    <div class=\"star\"></div>\r\n                    <div class=\"star\"></div>\r\n                    <div class=\"star\"></div>\r\n                </div>\r\n            </div>\r\n        </body>\r\n    );\r\n};\r\n\r\nexport default NotFound;","C:\\Users\\Ponte\\Documents\\Proyecto Final Python\\inspire\\inspire-frontend\\src\\components\\members\\EditMember.js",["151","152","153","154","155"],"import React, { useState, useEffect } from 'react';\r\nimport { Button, Form, FormGroup, Label, Input, TabContent, TabPane, Nav, NavItem, NavLink, Row, Col, Spinner } from 'reactstrap';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport classnames from 'classnames';\r\nimport MemberTransactions from './MemberTransactions';\r\nimport swal from 'sweetalert';\r\nimport CODIGO_HTTP from '../../utils/Utils'\r\nimport MemberTrades from './MemberTrades';\r\nimport MemberVouchers from './MemberVouchers';\r\nimport jwt_decode from 'jwt-decode';\r\n\r\nconst EditMember = () => {\r\n\r\n    let history = useHistory();\r\n\r\n    const { memberId } = useParams();\r\n\r\n    const [member, setMember] = useState({});\r\n\r\n    const [activeTab, setActiveTab] = useState('1');\r\n\r\n    const [loading, setLoading] = useState(true)\r\n\r\n    const [emailOriginalMember, setEmailOriginalMember] = useState(\"\")\r\n\r\n    const cleanForm = () => {\r\n        setMember({})\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!localStorage.getItem('token')) {\r\n            return history.push('/login');\r\n        } else {\r\n                var token = localStorage.getItem('token')\r\n                var memberLogged = jwt_decode(token);\r\n                if (memberLogged.permiso == \"Admin\") {\r\n                    loadMember();\r\n                } else {\r\n                    history.push(\"/NotFound\")\r\n                }\r\n        }\r\n    }, []);\r\n\r\n    const loadMember = async () => {\r\n        let response = await fetch(`http://localhost:5000/members/${memberId}`, {\r\n            method: \"GET\",\r\n        });\r\n        response = await response.json();\r\n        console.log(\"Response del Get Member: \", response.miembro)\r\n        setMember(response.miembro);\r\n        setEmailOriginalMember(response.miembro.email)\r\n        setLoading(false)\r\n    }\r\n\r\n    const { nombre, apellido, email, puntos, fecha_de_nacimiento, fecha_de_registro, estado, comentario } = member;\r\n\r\n    const onInputChange = e => {\r\n        setMember({ ...member, [e.target.name]: e.target.value })\r\n    };\r\n\r\n    const toggleTab = tab => {\r\n        if (activeTab !== tab) setActiveTab(tab);\r\n    }\r\n\r\n    const onSave = async () => {\r\n            console.log(JSON.stringify(member))\r\n            let response = await fetch(`http://localhost:5000/members/${member.id}`, {\r\n                method: \"PUT\",\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(member)\r\n            })\r\n\r\n            console.log(JSON.stringify(member))\r\n            response = await response.json();\r\n            console.log(response)\r\n\r\n            if (response.code == CODIGO_HTTP.OK) {\r\n                swal(\"Bien!\", \"Cambios guardados correctamente\", \"success\")\r\n                var token = localStorage.getItem('token')\r\n                var memberToken = jwt_decode(token);\r\n                if (memberId === memberToken.id) {\r\n                    localStorage.setItem('token', response.token)\r\n                }\r\n            } else {\r\n                swal(\"Error\", \"No se pudieron guardar los cambios\", \"error\")\r\n            }\r\n        }\r\n\r\n    return (\r\n        <Row>\r\n            <Col xs=\"6\" sm=\"4\" md=\"3\">\r\n                <Nav tabs vertical pills>\r\n                    <NavItem>\r\n                        <NavLink\r\n                            className={classnames({ active: activeTab === '1' })}\r\n                            onClick={() => {\r\n                                toggleTab('1');\r\n                            }}\r\n                        >\r\n                            Información\r\n              </NavLink>\r\n                    </NavItem>\r\n                    <NavItem>\r\n                        <NavLink\r\n                            className={classnames({ active: activeTab === '2' })}\r\n                            onClick={() => {\r\n                                toggleTab('2');\r\n                            }}\r\n                        >\r\n                            Transacciones\r\n              </NavLink>\r\n                        <NavLink\r\n                            className={classnames({ active: activeTab === '3' })}\r\n                            onClick={() => {\r\n                                toggleTab('3');\r\n                            }}\r\n                        >\r\n                            Canjes\r\n              </NavLink>\r\n                        <NavLink\r\n                            className={classnames({ active: activeTab === '4' })}\r\n                            onClick={() => {\r\n                                toggleTab('4');\r\n                            }}\r\n                        >\r\n                            Vouchers\r\n              </NavLink>\r\n                    </NavItem>\r\n                </Nav>\r\n            </Col>\r\n            <Col xs=\"6\" sm=\"6\" md=\"6\">\r\n                <TabContent activeTab={activeTab}>\r\n                    {(!loading) ?\r\n                        <TabPane tabId=\"1\">\r\n                            <Form id=\"formEditMember\">\r\n                                <FormGroup>\r\n                                    <Label for=\"memberName\">Nombre</Label>\r\n                                    <Input type=\"text\" id=\"memberName\" name=\"nombre\" placeholder=\"Nombre de cliente\" value={nombre} onChange={e => onInputChange(e)} />\r\n                                </FormGroup>\r\n                                <FormGroup>\r\n                                    <Label for=\"memberLastName\">Appellido</Label>\r\n                                    <Input type=\"text\" id=\"memberLastName\" name=\"apellido\" placeholder=\"Apellido de cliente\" value={apellido} onChange={e => onInputChange(e)} />\r\n                                </FormGroup>\r\n                                <FormGroup>\r\n                                    <Label for=\"memberEmail\">Email</Label>\r\n                                    <Input type=\"text\" id=\"memberEmail\" name=\"email\" placeholder=\"Email de cliente\" value={email} onChange={e => onInputChange(e)} readOnly/>\r\n                                </FormGroup>\r\n                                <FormGroup>\r\n                                    <Label for=\"memberPoints\">Puntos</Label>\r\n                                    <Input type=\"number\" id=\"memberPoints\" name=\"puntos\" placeholder=\"Puntos del cliente\" value={puntos} readOnly />\r\n                                </FormGroup>\r\n                                <FormGroup>\r\n                                    <Label for=\"memberBirthDate\">Fecha de nacimiento</Label>\r\n                                    <Input type=\"date\" id=\"memberBirthDate\" name=\"fecha_de_nacimiento\" placeholder=\"Fecha de nacimiento de cliente\" value={fecha_de_nacimiento} onChange={e => onInputChange(e)} />\r\n                                </FormGroup>\r\n                                <FormGroup>\r\n                                    <Label for=\"memberRegistrationDate\">Fecha de registro</Label>\r\n                                    <Input type=\"date\" id=\"memberRegistrationDate\" name=\"fecha_de_registro\" placeholder=\"Fecha de registro de cliente\" value={fecha_de_registro} readOnly />\r\n                                </FormGroup>\r\n                                <FormGroup>\r\n                                    <Label for=\"memberState\">Estado</Label>\r\n                                    <Input type=\"select\" id=\"memberState\" name=\"estado\" placeholder=\"Estado de cliente\" value={estado} onChange={e => onInputChange(e)}>\r\n                                        <option>Activo</option>\r\n                                        <option>Inactivo</option>\r\n                                    </Input>\r\n                                </FormGroup>\r\n                                <FormGroup>\r\n                                    <Label for=\"memberComment\">Comentario</Label>\r\n                                    <Input type=\"text\" id=\"memberComment\" name=\"comentario\" placeholder=\"Comentario de cliente\" value={comentario} onChange={e => onInputChange(e)} />\r\n                                </FormGroup>\r\n                            </Form>\r\n                            <Button color=\"primary\" onClick={onSave}>Guardar</Button>\r\n                        </TabPane> : <div className=\"spinner-center\"><Spinner color=\"primary\" /></div>}\r\n                    <TabPane tabId=\"2\">\r\n                        <MemberTransactions id={memberId} />\r\n                    </TabPane>\r\n                    <TabPane tabId=\"3\">\r\n                        <MemberTrades id={memberId} />\r\n                    </TabPane>\r\n                    <TabPane tabId=\"4\">\r\n                        <MemberVouchers id={memberId} />\r\n                    </TabPane>\r\n                </TabContent>\r\n            </Col>\r\n        </Row>\r\n    );\r\n};\r\n\r\nexport default EditMember;","C:\\Users\\Ponte\\Documents\\Proyecto Final Python\\inspire\\inspire-frontend\\src\\components\\members\\MembersTable.js",["156","157","158","159"],"import React, { useState, useEffect } from 'react';\r\nimport { Table, Button, Spinner } from 'reactstrap';\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport AddMember from './AddMember';\r\nimport swal from 'sweetalert';\r\nimport jwt_decode from 'jwt-decode';\r\nimport CODIGO_HTTP from '../../utils/Utils'\r\n\r\nconst MembersTable = () => {\r\n\r\n    let history = useHistory();\r\n\r\n    const [members, setMembers] = useState([]);\r\n\r\n    const [membersOriginal, setMembersOriginal] = useState([]);\r\n\r\n    const [loading, setLoading] = useState(true)\r\n\r\n    const [search, setSearch] = useState('')\r\n    \r\n    useEffect(() => {\r\n        if (!localStorage.getItem('token')) {\r\n            return history.push('/login');\r\n        } else {\r\n            var token = localStorage.getItem('token')\r\n            var memberLogged = jwt_decode(token);\r\n            if (memberLogged.permiso == \"Admin\") {\r\n                getMembers();\r\n            } else {\r\n                history.push(\"/NotFound\")\r\n            }\r\n        }\r\n    }, []);\r\n\r\n    const getMembers = async () => {\r\n        let response = await fetch('http://localhost:5000/members', {\r\n            method: \"GET\"\r\n        });\r\n\r\n        response = await response.json();\r\n        console.log(\"Response: \", response);\r\n        setMembers(response.miembros);\r\n        setMembersOriginal(response.miembros);\r\n        setLoading(false);\r\n    }\r\n\r\n    const deleteMember = (memberId) => {\r\n        swal({\r\n            title: \"¿Estás seguro?\",\r\n            text: \"Una vez eliminado, no se podrá recuperar el miembro\",\r\n            icon: \"warning\",\r\n            buttons: true,\r\n            dangerMode: true,\r\n        })\r\n            .then(async (willDelete) => {\r\n                if (willDelete) {\r\n                    let response = await fetch(`http://localhost:5000/members/${memberId}`, {\r\n                        method: \"DELETE\"\r\n                    })\r\n                    response = await response.json()\r\n                    if (response.code == CODIGO_HTTP.OK) {\r\n                        swal(\"Bien!\", response.mensaje, \"success\").then(() => {\r\n                            window.location.reload();\r\n                        })\r\n                    } else {\r\n                        swal(\"Error\", response.mensaje, \"error\")\r\n                    }\r\n                }\r\n            })\r\n    }\r\n\r\n    const onInputChange = async e => {\r\n        await setSearch(e.target.value)\r\n        console.log(search)\r\n    }\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault()\r\n        searchMembers()\r\n    }\r\n\r\n    const searchMembers = () => {\r\n        var members = membersOriginal\r\n        var filteredMembers = members.filter(item => {\r\n            if (item.nombre.toString().toLowerCase().includes(search.toLowerCase()) || item.apellido.toString().toLowerCase().includes(search.toLowerCase()))\r\n            return item;\r\n        })\r\n        setMembers(filteredMembers);\r\n    }\r\n    \r\n    return (\r\n        <div>\r\n            { (!loading) ?\r\n                <div>\r\n                    <div className=\"buttons-line d-flex justify-content-between align-items-center\">\r\n                        <form className=\"form-inline my-2 my-lg-0 form-search\" onSubmit={handleSubmit}>\r\n                            <input className=\"form-control mr-sm-1\" id=\"input-search-member\" type=\"text\" placeholder=\"Nombre o apellido...\" name=\"search\" value={search} onChange={onInputChange} />\r\n                            <button className=\"btn btn-secondary my-2 my-sm-0\" id=\"btn-search-member\" type=\"submit\">Buscar</button>\r\n                        </form>\r\n                        <AddMember />\r\n                    </div>\r\n                    <Table>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Id</th>\r\n                                <th>Nombre</th>\r\n                                <th>Apellido</th>\r\n                                <th>Email</th>\r\n                                <th>Puntos</th>\r\n                                <th>Fecha de Registro</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {members.map((member) => (\r\n                                <tr>\r\n                                    <td>{member.id}</td>\r\n                                    <td>{member.nombre}</td>\r\n                                    <td>{member.apellido}</td>\r\n                                    <td>{member.email}</td>\r\n                                    <td>{member.puntos}</td>\r\n                                    <td>{member.fecha_de_registro}</td>\r\n                                    <td>\r\n                                        <Link className=\"btn btn-primary\" id=\"btnEditMember\" exact to={`/members/${member.id}`}>Ver</Link>\r\n                                        <Button className=\"btn btn-danger\" id=\"btnDeleteMember\" onClick={() => deleteMember(member.id)}>Eliminar</Button>\r\n                                    </td>\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </Table>\r\n                </div> : <div className=\"spinner-center\"><Spinner color=\"primary\" /></div>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MembersTable;","C:\\Users\\Ponte\\Documents\\Proyecto Final Python\\inspire\\inspire-frontend\\src\\components\\pages\\Home.js",["160","161","162"],"import React, { useState, useEffect } from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport jwt_decode from 'jwt-decode';\r\nimport CODIGO_HTTP from '../../utils/Utils'\r\nimport swal from 'sweetalert';\r\nimport {Spinner} from 'reactstrap';\r\n\r\nconst Home = () => {\r\n\r\n    const history = useHistory();\r\n\r\n    const [info, setInfo] = useState({\r\n        nombre: \"\",\r\n        apellido: \"\",\r\n        puntos: \"\"\r\n    });\r\n\r\n    const [loading, setLoading] = useState(true)\r\n\r\n    const getMember = async (email) => {\r\n        let response = await fetch(`http://localhost:5000/members?email=${email}`, {\r\n            method: \"GET\"\r\n        });\r\n        response = await response.json();\r\n        console.log(response)\r\n        setLoading(false)\r\n        if (response.code == CODIGO_HTTP.OK) {\r\n            console.log(\"Miembro filtrado: \", response.miembros[0])\r\n            return response.miembros[0]\r\n        } else {\r\n            swal(\"Error\", response.mensaje, \"error\")\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (localStorage.getItem('token')) {\r\n            var token = localStorage.getItem('token')\r\n            var member = jwt_decode(token);\r\n            if (member.permiso == \"Admin\") {\r\n                document.getElementById('member-navbar').style.display = \"flex\";\r\n            } else {\r\n                document.getElementById('member-navbar').style.display = \"none\";\r\n            }\r\n            getMember(member.email)\r\n                .then(r => {\r\n                    setInfo({\r\n                        nombre: r.nombre,\r\n                        apellido: r.apellido,\r\n                        puntos: r.puntos\r\n                    })\r\n                })\r\n        } else {\r\n            return history.push('/login');\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            {(!loading) ? \r\n        <div>\r\n            <div className=\"jumbotron\">\r\n                <div className=\"container\">\r\n                <h1 className=\"display-3\">Bienvenido {info.nombre} {info.apellido}!</h1>\r\n                <h1>Tenes <strong>{info.puntos}</strong> Puntos</h1>\r\n                </div> \r\n            </div>\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-4\"> \r\n                        <h2>Programa de lealtad</h2>\r\n                        <p>Queremos que tengas una experiencia positiva y recompensarte a vos y a los clientes que compran o se comprometen con la marca una y otra vez.</p>\r\n                        <div className=\"align-items-center text-center d-flex\"><i class=\"fa fa-cart-plus fa-3x  mx-auto d-flex\" aria-hidden=\"true\"></i></div>\r\n                    </div>\r\n                    <div className=\"col-md-4\"> \r\n                        <h2>Puntos</h2>\r\n                        <p>Se te asignaron 500 puntos al momento de registrarte y además por cada $1 gastado, en compras con nosotros, obtendrás 0.5 puntos que se irán acumulando ¡sin límite!</p>\r\n                        <div className=\"align-items-center text-center d-flex\"><i className=\"fa fa-money fa-3x  mx-auto d-flex\" aria-hidden=\"true\"></i></div>\r\n                    </div>\r\n                    <div className=\"col-md-4 align-items-center\"> \r\n                        <h2>Canjes</h2>\r\n                        <p>¡Podrás canjear los puntos acumulados por cualquier producto de nuestro catálogo! Recibirás un voucher con un código único y con 30 días de validación.</p>\r\n                        <div className=\"align-items-center text-center d-flex\"><i className=\"fa fa-cart-arrow-down fa-3x mx-auto d-flex\"></i></div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n            : <div className=\"spinner-center\"><Spinner color=\"primary\"/></div>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Home;","C:\\Users\\Ponte\\Documents\\Proyecto Final Python\\inspire\\inspire-frontend\\src\\components\\members\\AddMember.js",["163","164","165","166"],"import React, { useState, useEffect } from 'react';\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Form, FormGroup, Label, Input} from 'reactstrap';\r\nimport {useHistory} from \"react-router-dom\";\r\nimport swal from 'sweetalert';\r\nimport CODIGO_HTTP from '../../utils/Utils';\r\n\r\nconst AddMember = () => {\r\n\r\n  let history = useHistory();\r\n\r\n  useEffect(() => {\r\n    if (!localStorage.getItem('token')) {\r\n      return history.push('/login');} }, [])\r\n\r\n  const [modal, setModal] = useState(false);\r\n\r\n  const [member, setMember] = useState({ \r\n      nombre: \"\",\r\n      apellido: \"\",\r\n      email: \"\",\r\n      password: \"\",\r\n      fecha_de_nacimiento: \"\",\r\n      comentario: \"\",\r\n      permiso: \"\"\r\n  });\r\n\r\n  const cleanForm = () => { setMember({      \r\n    nombre: \"\",\r\n    apellido: \"\",\r\n    email: \"\",\r\n    password: \"\",\r\n    fecha_de_nacimiento: \"\",\r\n    comentario: \"\",\r\n    permiso: \"\" })}\r\n\r\n  const toggle = () => {\r\n      cleanForm();\r\n      setModal(!modal);\r\n  }\r\n\r\n  const onSubmit = async () => {\r\n    let response = await fetch('http://localhost:5000/members', {\r\n      method: \"POST\",\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(member)\r\n  });\r\n\r\n    console.log(JSON.stringify(member))\r\n    response = await response.json();\r\n\r\n    if (response.code == CODIGO_HTTP.CREATED) {\r\n      swal(\"Bien!\", \"Se ha creado correctamente el miembro\", \"success\").then(() => { setModal(!modal); window.location.reload()})\r\n    } else {\r\n      swal(\"Error\", response.mensaje , \"error\") \r\n    }\r\n\r\n  }\r\n\r\n  const { nombre, apellido, email, password, fecha_de_nacimiento, comentario, permiso} = member;\r\n    \r\n  const onInputChange = e => {\r\n        setMember({...member, [e.target.name]: e.target.value})\r\n  };\r\n\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n    let response = await fetch('http://localhost:5000/members', {\r\n      method: \"POST\",\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(member)\r\n  });\r\n\r\n    console.log(JSON.stringify(member))\r\n    response = await response.json();\r\n\r\n    if (response.code == CODIGO_HTTP.CREATED) {\r\n      swal(\"Bien!\", \"Se ha creado correctamente el miembro\", \"success\").then(() => setModal(!modal))\r\n    } else {\r\n      swal(\"Error\", response.mensaje , \"error\") \r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Button className=\"btn btn-primary btn-add\" color=\"btn btn-primary\" onClick={toggle}>Crear Miembro</Button>\r\n      <Modal isOpen={modal}>\r\n      <Form id=\"formAddMember\" onSubmit={handleSubmit}>\r\n        <ModalHeader>Crear Miembro</ModalHeader>\r\n        <ModalBody>\r\n      <FormGroup>\r\n        <Label for=\"memberName\">Nombre</Label>\r\n        <Input type=\"text\" id=\"memberName\" name=\"nombre\" placeholder=\"Nombre de cliente\" value={nombre} onChange={e => onInputChange(e)} required />\r\n      </FormGroup>\r\n      <FormGroup>\r\n        <Label for=\"memberLastName\">Appellido</Label>\r\n        <Input type=\"text\" id=\"memberLastName\" name=\"apellido\"  placeholder=\"Apellido de cliente\" value={apellido} onChange={e => onInputChange(e)} required />\r\n      </FormGroup>\r\n      <FormGroup>\r\n        <Label for=\"memberEmail\">Email</Label>\r\n        <Input type=\"text\" id=\"memberEmail\" name=\"email\" placeholder=\"Email de cliente\" value={email} onChange={e => onInputChange(e)} required />\r\n      </FormGroup>\r\n      <FormGroup>\r\n        <Label for=\"memberPassword\">Password</Label>\r\n        <Input type=\"password\" id=\"memberPassword\" name=\"password\" placeholder=\"Contraseña de cliente\" value={password} onChange={e => onInputChange(e)} required />\r\n      </FormGroup>\r\n      <FormGroup>\r\n        <Label for=\"memberBirthDate\">Fecha de Nacimiento</Label>\r\n        <Input type=\"date\" id=\"memberBirthDate\" name=\"fecha_de_nacimiento\" value={fecha_de_nacimiento} onChange={e => onInputChange(e)} />\r\n      </FormGroup>\r\n      <FormGroup>\r\n        <Label for=\"memberComment\">Comentario</Label>\r\n        <Input type=\"textbox\" id=\"memberComment\" name=\"comentario\" placeholder=\"Comentario\" value={comentario} onChange={e => onInputChange(e)} />\r\n      </FormGroup>\r\n      <FormGroup>\r\n        <Label for=\"memberRol\">Permiso</Label>\r\n        <Input type=\"select\" id=\"memberRol\" name=\"permiso\" placeholder=\"Permiso\" value={permiso} onChange={e => onInputChange(e)} required>\r\n        <option>Usuario</option>\r\n        <option>Admin</option>\r\n        </Input>\r\n      </FormGroup>\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button color=\"primary\" type=\"submit\">Aceptar</Button>\r\n          <Button color=\"secondary\" onClick={toggle}>Cancel</Button>\r\n        </ModalFooter>\r\n        </Form>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AddMember;","C:\\Users\\Ponte\\Documents\\Proyecto Final Python\\inspire\\inspire-frontend\\src\\components\\pages\\Login.js",["167","168"],"import React, { useState, useEffect } from 'react';\r\nimport '../../stylesheets/login.css';\r\nimport CODIGO_HTTP from '../../utils/Utils'\r\nimport { useHistory } from \"react-router-dom\";\r\nimport swal from 'sweetalert';\r\nimport Register from './Register';\r\n\r\nconst Login = () => {\r\n\r\n    const history = useHistory();\r\n\r\n    const [form, setForm] = useState({\r\n        email: \"\",\r\n        password: \"\"\r\n    });\r\n\r\n    useEffect(() => {\r\n        document.getElementById('navigation-bar').style.display = \"none\";\r\n        verifyRoute();\r\n        return () => {\r\n            document.getElementById('navigation-bar').style.display = \"flex\";\r\n        }\r\n    }, []);\r\n\r\n    const verifyRoute = () => {\r\n\r\n        if (localStorage.getItem('token')) {\r\n            return history.push('/home');\r\n        }\r\n    }\r\n\r\n    const handleChange = async e => {\r\n        await setForm({ ...form, [e.target.name]: e.target.value })\r\n    }\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n        let response = await fetch('http://localhost:5000/login', {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(form)\r\n        });\r\n\r\n        response = await response.json();\r\n\r\n        console.log(\"Response: \", response);\r\n\r\n        if (response.code == CODIGO_HTTP.OK) {\r\n            localStorage.setItem(\"token\", response.token)\r\n            history.push('/home');\r\n        } else {\r\n            swal(\"Error\", response.mensaje, \"error\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"container-fluid\">\r\n            <div className=\"row no-gutter\">\r\n                <div className=\"d-none d-md-flex col-md-4 col-lg-6 bg-image\"></div>\r\n                <div className=\"col-md-8 col-lg-6\">\r\n                    <div className=\"login d-flex align-items-center py-5\">\r\n                        <div className=\"container\">\r\n                            <div className=\"row\">\r\n                                <div className=\"col-md-9 col-lg-8 mx-auto\">\r\n                                    <h3 className=\"login-heading mb-4\">Bienvenido!</h3>\r\n                                    <form onSubmit={handleSubmit}>\r\n                                        <div className=\"form-label-group\">\r\n                                            <input type=\"email\" id=\"inputEmail\" name=\"email\" className=\"form-control\" onChange={e => handleChange(e)} placeholder=\"Email\" required />\r\n                                            <label for=\"inputEmail\">Email</label>\r\n                                        </div>\r\n                                        <div className=\"form-label-group\">\r\n                                            <input type=\"password\" id=\"inputPassword\" name=\"password\" className=\"form-control\" onChange={e => handleChange(e)} placeholder=\"Contraseña\" required />\r\n                                            <label for=\"inputPassword\">Contraseña</label>\r\n                                        </div>\r\n                                        <button className=\"btn btn-lg btn-primary btn-block btn-login text-uppercase font-weight-bold mb-2\" type=\"submit\">Iniciar sesión</button>\r\n                                    </form>\r\n                                    <div className=\"text-center\">\r\n                                        <Register />\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Login;","C:\\Users\\Ponte\\Documents\\Proyecto Final Python\\inspire\\inspire-frontend\\src\\components\\transactions\\TransactionsTab.js",["169","170","171","172"],"import React, { useState, useEffect } from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport AddTransaction from './AddTransaction';\r\nimport SearchTransaction from './SearchTransaction';\r\nimport TransactionsTable from './TransactionsTable';\r\nimport jwt_decode from 'jwt-decode';\r\nimport { Spinner } from 'reactstrap';\r\n\r\nconst TransactionsTab = () => {\r\n\r\n    let history = useHistory();\r\n\r\n    const [transactions, setTransactions] = useState([]);\r\n\r\n    const [transactionsOriginal, setTransactionsOriginal] = useState([]);\r\n\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    const [isAdmin, setIsAdmin] = useState(false)\r\n\r\n    const [search, setSearch] = useState('')\r\n\r\n    useEffect(() => {\r\n        if (!localStorage.getItem('token')) {\r\n            return history.push('/login');\r\n        } else {\r\n            var token = localStorage.getItem('token')\r\n            var memberLogged = jwt_decode(token);\r\n            if (memberLogged.permiso == \"Admin\") {\r\n                getTransactionsAdmin();\r\n                setIsAdmin(true)\r\n            } else {\r\n                getTransactionsUser(memberLogged.id);\r\n            }\r\n        }\r\n    }, []);\r\n\r\n    const getTransactionsAdmin = async () => {\r\n        let response = await fetch('http://localhost:5000/transactions', {\r\n            method: \"GET\"\r\n        });\r\n        response = await response.json();\r\n        setTransactions(response.transacciones);\r\n        setTransactionsOriginal(response.transacciones);\r\n        setLoading(false);\r\n    }\r\n\r\n    const getTransactionsUser= async (id_member) => {\r\n        let response = await fetch(`http://localhost:5000/transactions?id_miembro=${id_member}`, {\r\n            method: \"GET\"\r\n        });\r\n        response = await response.json();\r\n        setTransactions(response.transacciones);\r\n        setTransactionsOriginal(response.transacciones);\r\n        setLoading(false);\r\n    }\r\n\r\n    const onInputChange = async e => {\r\n        await setSearch(e.target.value)\r\n        console.log(search)\r\n    }\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault()\r\n        SearchTransactions()\r\n    }\r\n\r\n    const SearchTransactions = () => {\r\n        var transactions = transactionsOriginal\r\n        var filteredTransactions = transactions.filter(transaction => {\r\n            if (transaction.id.toString().includes(search))\r\n            return transaction;\r\n        })\r\n        setTransactions(filteredTransactions);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"buttons-line d-flex justify-content-between align-items-center\">\r\n            <form className=\"form-inline my-2 my-lg-0 form-search\" onSubmit={handleSubmit}>\r\n                            <input className=\"form-control mr-sm-1\" id=\"input-search-transaction\" type=\"text\" placeholder=\"Id de transacción...\" name=\"search\" value={search} onChange={onInputChange} />\r\n                            <button className=\"btn btn-secondary my-2 my-sm-0\" id=\"btn-search-transaction\" type=\"submit\">Buscar</button>\r\n                        </form>\r\n                { isAdmin ? <AddTransaction /> : null}\r\n                </div>\r\n            {(!loading) ?\r\n                <div>\r\n                    <TransactionsTable\r\n                        transactions={transactions} />\r\n                </div> : <div className=\"spinner-center\"><Spinner color=\"primary\" /></div>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TransactionsTab;","C:\\Users\\Ponte\\Documents\\Proyecto Final Python\\inspire\\inspire-frontend\\src\\components\\vouchers\\VouchersTab.js",["173","174","175"],"import React, { useState, useEffect } from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Spinner } from 'reactstrap';\r\nimport VouchersTable from './VouchersTable';\r\nimport jwt_decode from 'jwt-decode';\r\n\r\nconst VouchersTab = () => {\r\n\r\n    let history = useHistory();\r\n\r\n    const [vouchers, setVouchers] = useState([]);\r\n\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    const [vouchersOriginal, setVouchersOriginal] = useState([]);\r\n    \r\n    const [search, setSearch] = useState('')\r\n\r\n    useEffect(() => {\r\n        if (!localStorage.getItem('token')) {\r\n            return history.push('/login');\r\n        } else {\r\n            var token = localStorage.getItem('token')\r\n            var memberLogged = jwt_decode(token);\r\n            if (memberLogged.permiso == \"Admin\") {\r\n                getVouchersAdmin();\r\n            } else {\r\n                getVouchersUser(memberLogged.id);\r\n            }\r\n        }\r\n    }, []);\r\n\r\n    const getVouchersAdmin = async () => {\r\n        let response = await fetch('http://localhost:5000/vouchers', {\r\n            method: \"GET\"\r\n        });\r\n        response = await response.json();\r\n        setVouchers(response.vouchers);\r\n        setVouchersOriginal(response.vouchers);\r\n        setLoading(false);\r\n    }\r\n\r\n    const getVouchersUser = async (id_member) => {\r\n        let response = await fetch(`http://localhost:5000/vouchers?id_miembro=${id_member}`, {\r\n            method: \"GET\"\r\n        });\r\n        response = await response.json();\r\n        setVouchers(response.vouchers);\r\n        setVouchersOriginal(response.vouchers);\r\n        setLoading(false);\r\n    }\r\n\r\n    const onInputChange = async e => {\r\n        await setSearch(e.target.value)\r\n    }\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault()\r\n        SearchVouchers()\r\n    }\r\n\r\n    const SearchVouchers = () => {\r\n        var vouchers = vouchersOriginal\r\n        var filteredVouchers = vouchers.filter(voucher => {\r\n            if (voucher.id.toString().includes(search))\r\n            return voucher;\r\n        })\r\n        setVouchers(filteredVouchers);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"buttons-line d-flex justify-content-between align-items-center\">\r\n                <form className=\"form-inline my-2 my-lg-0 form-search\" onSubmit={handleSubmit}>\r\n                    <input className=\"form-control mr-sm-1\" id=\"input-search-voucher\" type=\"text\" placeholder=\"Id de voucher...\" name=\"search\" value={search} onChange={onInputChange} />\r\n                    <button className=\"btn btn-secondary my-2 my-sm-0\" id=\"btn-search-voucher\" type=\"submit\">Buscar</button>\r\n                </form>\r\n            </div>\r\n            {(!loading) ?\r\n                <VouchersTable\r\n                    vouchers={vouchers} /> : <div className=\"spinner-center\"><Spinner color=\"primary\" /></div>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default VouchersTab;","C:\\Users\\Ponte\\Documents\\Proyecto Final Python\\inspire\\inspire-frontend\\src\\components\\transactions\\EditTransaction.js",["176","177","178","179","180"],"import React, { useState, useEffect } from 'react';\r\nimport { Button, Form, FormGroup, Label, Input, Spinner } from 'reactstrap';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport jwt_decode from 'jwt-decode';\r\nimport CODIGO_HTTP from '../../utils/Utils'\r\n\r\nconst EditTransaction = () => {\r\n\r\n    let history = useHistory();\r\n\r\n    const { txtId } = useParams();\r\n\r\n    const [transaction, setTransaction] = useState({});\r\n\r\n    const [miembro, setMiembro] = useState({});\r\n\r\n    const [producto, setProducto] = useState({});\r\n\r\n    const [loading, setLoading] = useState(true);\r\n\r\n\r\n    useEffect(() => {\r\n        if (!localStorage.getItem('token')) {\r\n            return history.push('/login');\r\n        } else {\r\n            var token = localStorage.getItem('token')\r\n            var memberLogged = jwt_decode(token);\r\n            if (memberLogged.permiso == \"Admin\") {\r\n                loadTransactionAdmin();\r\n            } else {\r\n                loadTransactionUser(memberLogged.id);\r\n            }\r\n        }\r\n    }, []);\r\n\r\n    const loadTransactionAdmin = async () => {\r\n        let response = await fetch(`http://localhost:5000/transactions/${txtId}`, {\r\n            method: \"GET\",\r\n        });\r\n        response = await response.json();\r\n\r\n        if (response.code == CODIGO_HTTP.OK) {\r\n            setTransaction(response.transaccion);\r\n        } else {\r\n            return history.push(\"/NotFound\")\r\n        }\r\n        if (response.transaccion.miembro)\r\n            setMiembro(response.transaccion.miembro)\r\n        else\r\n            setMiembro(null)\r\n        if (response.transaccion.producto)\r\n            setProducto(response.transaccion.producto)\r\n        else\r\n            setProducto(null)\r\n        setLoading(false)\r\n    }\r\n\r\n    const loadTransactionUser = async (id_miembro) => {\r\n        let response = await fetch(`http://localhost:5000/transactions/${txtId}`, {\r\n            method: \"GET\",\r\n        });\r\n        response = await response.json();\r\n        if (response.code == CODIGO_HTTP.OK) {\r\n            setTransaction(response.transaccion);\r\n        } else {\r\n            return history.push(\"/NotFound\")\r\n        }\r\n        if (response.transaccion.miembro)\r\n            if (response.transaccion.miembro.id != id_miembro) {\r\n                history.push(\"/NotFound\")\r\n            }\r\n            else setMiembro(response.transaccion.miembro)\r\n        else\r\n            setMiembro(null)\r\n\r\n        if (response.transaccion.producto)\r\n            setProducto(response.transaccion.producto)\r\n        else\r\n            setProducto(null)\r\n        setLoading(false)\r\n    }\r\n\r\n    const { tipo, monto, puntos, fecha_creacion, fecha_ultima_actualizacion, descripcion } = transaction;\r\n\r\n\r\n    const onCancel = () => {\r\n        return history.push('/transactions')\r\n    }\r\n\r\n    return (\r\n        <div> { (!loading) ?\r\n            <div className=\"container fluid\">\r\n                <Form id=\"formEditTransaction\">\r\n                    <FormGroup>\r\n                        <Label for=\"txtType\">Tipo</Label>\r\n                        <Input type=\"text\" id=\"txtType\" name=\"tipo\" placeholder=\"Tipo de transacción\" value={tipo} readOnly />\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"txtIdMember\">Id Miembro</Label>\r\n                        <Input type=\"integer\" id=\"txtIdMember\" name=\"id_miembro\" placeholder=\"Miembro de transacción\" value={miembro ? miembro.id : null} readOnly />\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"txtIdProduct\">Id Producto</Label>\r\n                        <Input type=\"integer\" id=\"txtIdProduct\" name=\"id_producto\" placeholder=\"Producto de transacción\" value={producto ? producto.id : null} readOnly />\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"txtAmount\">Monto</Label>\r\n                        <Input type=\"text\" id=\"txtAmount\" name=\"monto\" placeholder=\"Monto de transacción\" value={monto} readOnly />\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"txtPoints\">Puntos</Label>\r\n                        <Input type=\"integer\" id=\"txtPoints\" name=\"puntos\" placeholder=\"Puntos de transacción\" value={puntos} readOnly />\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"txtRegistrationDate\">Fecha de creación</Label>\r\n                        <Input type=\"date\" id=\"txtRegistrationDate\" name=\"fecha_creacion\" placeholder=\"Fecha de creación de transacción\" value={fecha_creacion} readOnly />\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"txtUpdateDate\">Fecha de actualización</Label>\r\n                        <Input type=\"date\" id=\"txtUpdateDate\" name=\"fecha_ultima_actualizacion\" placeholder=\"Fecha de actualización de transacción\" value={fecha_ultima_actualizacion} readOnly />\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"txtDescription\">Descripción</Label>\r\n                        <Input type=\"textbox\" id=\"txtDescription\" name=\"descripcion\" placeholder=\"Descripción de transacción\" value={descripcion} readOnly />\r\n                    </FormGroup>\r\n                </Form>\r\n                <Button color=\"primary\" onClick={onCancel}>Cancelar</Button>\r\n            </div> : <div className=\"spinner-center\"><Spinner color=\"primary\" /></div>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EditTransaction;","C:\\Users\\Ponte\\Documents\\Proyecto Final Python\\inspire\\inspire-frontend\\src\\components\\products\\ProductsTable.js",["181","182","183"],"import React, { useState, useEffect } from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Spinner } from 'reactstrap';\r\nimport AddProduct from './AddProduct';\r\nimport Producto from './Producto';\r\nimport jwt_decode from 'jwt-decode';\r\n\r\nconst ProductsTable = () => {\r\n\r\n    let history = useHistory();\r\n\r\n    const [products, setProducts] = useState([]);\r\n\r\n    const [productsOriginal, setProductsOriginal] = useState([]);\r\n\r\n    const [loading, setLoading] = useState(true)\r\n\r\n    const [isAdmin, setIsAdmin] = useState(false)\r\n\r\n    const [search, setSearch] = useState('')\r\n\r\n    useEffect(() => {\r\n        if (!localStorage.getItem('token')) {\r\n            return history.push('/login');\r\n        } else {\r\n            var token = localStorage.getItem('token')\r\n            var memberLogged = jwt_decode(token);\r\n            if (memberLogged.permiso == \"Admin\") {\r\n                setIsAdmin(true)\r\n            }\r\n            getProducts();\r\n        }\r\n    }, []);\r\n\r\n    const getProducts = async () => {\r\n        let response = await fetch('http://localhost:5000/products', {\r\n            method: \"GET\"\r\n        });\r\n\r\n        response = await response.json();\r\n\r\n        console.log(\"Response: \", response);\r\n        setProducts(response.productos);\r\n        setProductsOriginal(response.productos);\r\n        setLoading(false);\r\n    }\r\n\r\n    const onInputChange = async e => {\r\n        await setSearch(e.target.value)\r\n    }\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault()\r\n        SearchProducts()\r\n    }\r\n\r\n    const SearchProducts = () => {\r\n        var products = productsOriginal\r\n        var filteredProducts = products.filter(product => {\r\n            if (product.nombre.toString().toLowerCase().includes(search.toLowerCase()) || product.descripcion.toString().toLowerCase().includes(search.toLowerCase()))\r\n                return product;\r\n        })\r\n        setProducts(filteredProducts);\r\n    }\r\n\r\n    return (\r\n        <div><div className=\"buttons-line d-flex justify-content-between align-items-center\">\r\n            <form className=\"form-inline my-2 my-lg-0 form-search\" onSubmit={handleSubmit}>\r\n                <input className=\"form-control mr-sm-1\" id=\"input-search-product\" type=\"text\" placeholder=\"Nombre o descripción...\" name=\"search\" value={search} onChange={onInputChange} />\r\n                <button className=\"btn btn-secondary my-2 my-sm-0\" id=\"btn-search-product\" type=\"submit\">Buscar</button>\r\n            </form>\r\n            {isAdmin ? <AddProduct /> : null}  </div>\r\n            { (!loading) ?\r\n                <div className=\"col-12 p-2 row\">\r\n                    {products.map(producto => (\r\n                        <Producto\r\n                            key={producto.id}\r\n                            producto={producto} />\r\n                    ))}\r\n                </div> : <div className=\"spinner-center\"><Spinner color=\"primary\" /></div>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProductsTable;","C:\\Users\\Ponte\\Documents\\Proyecto Final Python\\inspire\\inspire-frontend\\src\\components\\vouchers\\EditVoucher.js",["184","185","186","187","188"],"import React, { useState, useEffect } from 'react';\r\nimport { Button, Form, FormGroup, Label, Input, Spinner } from 'reactstrap';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport jwt_decode from 'jwt-decode';\r\nimport CODIGO_HTTP from '../../utils/Utils'\r\n\r\nconst EditVoucher = () => {\r\n\r\n    let history = useHistory();\r\n\r\n    const { voucherId } = useParams();\r\n\r\n    const [voucher, setVoucher] = useState({});\r\n\r\n    const [id_miembro, setId_miembro] = useState();\r\n\r\n    const [id_producto, setId_producto] = useState();\r\n\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        if (!localStorage.getItem('token')) {\r\n            return history.push('/login');\r\n        } else {\r\n                var token = localStorage.getItem('token')\r\n                var memberLogged = jwt_decode(token);\r\n                if (memberLogged.permiso == \"Admin\") {\r\n                    loadVoucherAdmin();\r\n                } else {\r\n                    loadVoucherUser(memberLogged.id);\r\n                }\r\n        }\r\n    }, []);\r\n\r\n    const loadVoucherAdmin = async () => {\r\n        let response = await fetch(`http://localhost:5000/vouchers/${voucherId}`, {\r\n            method: \"GET\",\r\n        });\r\n        response = await response.json();\r\n\r\n        if (response.code == CODIGO_HTTP.OK) {\r\n            setVoucher(response.voucher);\r\n        } else {\r\n            return history.push(\"/NotFound\")\r\n        }\r\n        \r\n        if (response.voucher.miembro)\r\n            setId_miembro(response.voucher.miembro.id)\r\n        else\r\n            setId_miembro(null)\r\n\r\n        if (response.voucher.producto)\r\n            setId_producto(response.voucher.producto.id)\r\n        else\r\n            setId_producto(null)\r\n        setLoading(false)\r\n    }\r\n\r\n    const loadVoucherUser = async (id_miembro) => {\r\n        let response = await fetch(`http://localhost:5000/vouchers/${voucherId}`, {\r\n            method: \"GET\",\r\n        });\r\n        response = await response.json();\r\n\r\n        if (response.code == CODIGO_HTTP.OK) {\r\n            setVoucher(response.voucher);\r\n        } else {\r\n            return history.push(\"/NotFound\")\r\n        }\r\n\r\n        if (response.voucher.miembro)\r\n            if (response.voucher.miembro.id != id_miembro) {\r\n                history.push(\"/NotFound\")\r\n            } else\r\n                setId_miembro(response.voucher.miembro.id)\r\n        else\r\n            setId_miembro(null)\r\n\r\n        if (response.voucher.producto)\r\n            setId_producto(response.voucher.producto.id)\r\n        else\r\n            setId_producto(null)\r\n        setLoading(false)\r\n    }\r\n\r\n    const { id, fecha_de_creacion, estado, fecha_de_vencimiento } = voucher;\r\n\r\n    const onCancel = () => {\r\n        return history.push('/vouchers')\r\n    }\r\n\r\n    return (\r\n        <div> { (!loading) ?\r\n            <div className=\"container fluid\">\r\n                <Form id=\"formEditTransaction\">\r\n                    <FormGroup>\r\n                        <Label for=\"voucherId\">ID</Label>\r\n                        <Input type=\"text\" id=\"voucherId\" name=\"id\" placeholder=\"Id de voucher\" value={id} readOnly />\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"voucherMember\">Miembro</Label>\r\n                        <Input type=\"integer\" id=\"voucherMember\" name=\"id_miembro\" placeholder=\"Id de Miembro del voucher\" value={id_miembro} readOnly />\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"voucherProduct\">Producto</Label>\r\n                        <Input type=\"integer\" id=\"voucherProduct\" name=\"id_producto\" placeholder=\"Id de Miembro del voucher\" value={id_producto} readOnly />\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"voucherRegistrationDate\">Fecha de creación</Label>\r\n                        <Input type=\"date\" id=\"voucherRegistrationDate\" name=\"fecha_de_creacion\" placeholder=\"Fecha de creación del voucher\" value={fecha_de_creacion} readOnly />\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"voucherState\">Estado</Label>\r\n                        <Input type=\"text\" id=\"voucherState\" name=\"estado\" placeholder=\"Estado del voucher\" value={estado} readOnly />\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"voucherExpirationDate\">Fecha de vencimiento</Label>\r\n                        <Input type=\"date\" id=\"voucherExpirationDate\" name=\"fecha_de_vencimiento\" placeholder=\"Fecha de vencmiento del voucher\" value={fecha_de_vencimiento} readOnly />\r\n                    </FormGroup>\r\n                </Form>\r\n                <Button color=\"primary\" onClick={onCancel}>Cancelar</Button>\r\n            </div> : <div className=\"spinner-center\"><Spinner color=\"primary\" /></div>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EditVoucher;","C:\\Users\\Ponte\\Documents\\Proyecto Final Python\\inspire\\inspire-frontend\\src\\components\\pages\\LogOut.js",[],"C:\\Users\\Ponte\\Documents\\Proyecto Final Python\\inspire\\inspire-frontend\\src\\components\\members\\MemberTrades.js",["189"],"import React, { useState, useEffect } from 'react';\r\nimport TransactionsTable from '../transactions/TransactionsTable';\r\n\r\nconst MemberTrades= (props) => {\r\n\r\n    const { id } = props\r\n\r\n    const [transactions, setTransactions] = useState([]);\r\n\r\n    useEffect(() => {\r\n        loadTransactions(id)\r\n    },[]);\r\n\r\n    const loadTransactions = async (id) => {\r\n        let tipo = \"Canje\"\r\n        let response = await fetch(`http://localhost:5000/transactions?id_miembro=${id}&tipo=${tipo}`, {\r\n            method: \"GET\"\r\n          });\r\n          response = await response.json();\r\n\r\n          setTransactions(response.transacciones);\r\n    }\r\n    \r\n    return (\r\n        <div>\r\n            <TransactionsTable transactions={transactions} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MemberTrades;","C:\\Users\\Ponte\\Documents\\Proyecto Final Python\\inspire\\inspire-frontend\\src\\components\\members\\MemberTransactions.js",["190"],"import React, { useState, useEffect } from 'react';\r\nimport TransactionsTable from '../transactions/TransactionsTable';\r\n\r\nconst MemberTransactions = (props) => {\r\n\r\n    const { id } = props\r\n\r\n    const [transactions, setTransactions] = useState([]);\r\n\r\n    useEffect(() => {\r\n        loadTransactions(id)\r\n    },[]);\r\n\r\n    const loadTransactions = async (id) => {\r\n        let response = await fetch(`http://localhost:5000/transactions?id_miembro=${id}`, {\r\n            method: \"GET\"\r\n          });\r\n          response = await response.json();\r\n\r\n          setTransactions(response.transacciones);\r\n    }\r\n    \r\n    return (\r\n        <div>\r\n            <TransactionsTable transactions={transactions} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MemberTransactions;","C:\\Users\\Ponte\\Documents\\Proyecto Final Python\\inspire\\inspire-frontend\\src\\components\\members\\MemberVouchers.js",["191"],"import React, { useState, useEffect } from 'react';\r\nimport VouchersTable from '../vouchers/VouchersTable';\r\n\r\nconst MemberVouchers = (props) => {\r\n\r\n    const { id } = props\r\n\r\n    const [vouchers, setVouchers] = useState([]);\r\n\r\n    useEffect(() => {\r\n        loadVouchers(id)\r\n    },[]);\r\n\r\n    const loadVouchers = async (id) => {\r\n        let response = await fetch(`http://localhost:5000/vouchers?id_miembro=${id}`, {\r\n            method: \"GET\"\r\n          });\r\n          response = await response.json();\r\n\r\n          setVouchers(response.vouchers);\r\n    }\r\n    \r\n    return (\r\n        <div>\r\n            <VouchersTable vouchers={vouchers} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MemberVouchers;","C:\\Users\\Ponte\\Documents\\Proyecto Final Python\\inspire\\inspire-frontend\\src\\components\\members\\SearchMember.js",["192"],"C:\\Users\\Ponte\\Documents\\Proyecto Final Python\\inspire\\inspire-frontend\\src\\components\\transactions\\SearchTransaction.js",[],"C:\\Users\\Ponte\\Documents\\Proyecto Final Python\\inspire\\inspire-frontend\\src\\components\\transactions\\TransactionsTable.js",[],"C:\\Users\\Ponte\\Documents\\Proyecto Final Python\\inspire\\inspire-frontend\\src\\components\\pages\\Register.js",["193","194","195","196"],"import React, { useState } from 'react';\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Form, FormGroup, Label, Input} from 'reactstrap';\r\nimport CODIGO_HTTP from '../../utils/Utils'\r\nimport swal from 'sweetalert';\r\n\r\nconst Register = () => {\r\n\r\n    const [modal, setModal] = useState(false);\r\n\r\n    const [fieldRequireds, setFieldRequireds] = useState(true);\r\n\r\n    const [member, setMember] = useState({ \r\n        nombre: \"\",\r\n        apellido: \"\",\r\n        email: \"\",\r\n        password: \"\",\r\n        fecha_de_nacimiento: \"\",\r\n        comentario: \"\",\r\n        permiso: \"\"\r\n    });\r\n  \r\n    const cleanForm = () => { setMember({      \r\n      nombre: \"\",\r\n      apellido: \"\",\r\n      email: \"\",\r\n      password: \"\",\r\n      fecha_de_nacimiento: \"\",\r\n      comentario: \"\",\r\n      permiso: \"\"\r\n    })}\r\n  \r\n    const toggle = () => {\r\n        cleanForm();\r\n        setModal(!modal);\r\n    }\r\n\r\n    const handleSubmitRegister = (event) => {\r\n            doRegister(event)\r\n      }\r\n\r\n      const checkFieldsRequired = () => {\r\n        if (!nombre) {\r\n            setFieldRequireds(false)\r\n            return swal(\"Error\", \"Campo nombre es requerido\", \"error\")\r\n\r\n        }\r\n        if (!apellido) {\r\n            setFieldRequireds(false)\r\n            return swal(\"Error\", \"Campo apellido es requerido\", \"error\")\r\n          \r\n        }\r\n        if (!email) {\r\n            setFieldRequireds(false)\r\n            return swal(\"Error\", \"Campo email es requerido\", \"error\")\r\n        }\r\n            \r\n        if (!password) {\r\n            setFieldRequireds(false)\r\n            return swal(\"Error\", \"Campo password es requerido\", \"error\")\r\n        }\r\n        return setFieldRequireds(true)\r\n      }\r\n\r\n      const doRegister = async (event) => {\r\n        event.preventDefault();\r\n        console.log(\"REGISTER\")\r\n        let response = await fetch('http://localhost:5000/register', {\r\n            method: \"POST\",\r\n            headers: {\r\n              'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(member)\r\n        });\r\n          console.log(JSON.stringify(member))\r\n          response = await response.json();\r\n          console.log(response)\r\n          if (response.code == CODIGO_HTTP.CREATED) {\r\n              swal(\"Bien!\", \"Ya estás inscripto como miembro\", \"success\")\r\n              .then(() => {toggle()})\r\n          } else {\r\n              swal(\"Error\", response.mensaje, \"error\")\r\n          }\r\n    }\r\n\r\n    const { nombre, apellido, email, password, fecha_de_nacimiento} = member;\r\n    \r\n    const onInputChange = e => {\r\n          setMember({...member, [e.target.name]: e.target.value})\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <a class=\"small\" onClick={toggle}>Registrate aquí!</a>\r\n            <Modal isOpen={modal} toggle={toggle}>\r\n            <Form id=\"formAddMember\" onSubmit={handleSubmitRegister}>\r\n                <ModalHeader toggle={toggle}>Crea tu usuario</ModalHeader>\r\n                <ModalBody>\r\n                        <FormGroup>\r\n                            <Label for=\"memberName\">Nombre</Label>\r\n                            <Input type=\"text\" id=\"memberName\" name=\"nombre\" placeholder=\"Nombre\" value={nombre} onChange={e => onInputChange(e)} required />\r\n                        </FormGroup>\r\n                        <FormGroup>\r\n                            <Label for=\"memberLastName\">Appellido</Label>\r\n                            <Input type=\"text\" id=\"memberLastName\" name=\"apellido\" placeholder=\"Apellido\" value={apellido} onChange={e => onInputChange(e)} required />\r\n                        </FormGroup>\r\n                        <FormGroup>\r\n                            <Label for=\"memberEmail\">Email</Label>\r\n                            <Input type=\"text\" id=\"memberEmail\" name=\"email\" placeholder=\"Email\" value={email} onChange={e => onInputChange(e)} required />\r\n                        </FormGroup>\r\n                        <FormGroup>\r\n                            <Label for=\"memberPassword\">Password</Label>\r\n                            <Input type=\"password\" id=\"memberPassword\" name=\"password\" placeholder=\"Contraseña\" value={password} onChange={e => onInputChange(e)} required />\r\n                        </FormGroup>\r\n                        <FormGroup>\r\n                            <Label for=\"memberBirthDate\">Fecha de Nacimiento</Label>\r\n                            <Input type=\"date\" id=\"memberBirthDate\" name=\"fecha_de_nacimiento\" value={fecha_de_nacimiento} onChange={e => onInputChange(e)} />\r\n                        </FormGroup>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button color=\"primary\" type=\"submit\">Aceptar</Button>\r\n                    <Button color=\"secondary\" onClick={toggle}>Cancel</Button>\r\n                </ModalFooter>\r\n                </Form>\r\n            </Modal>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Register;","C:\\Users\\Ponte\\Documents\\Proyecto Final Python\\inspire\\inspire-frontend\\src\\components\\products\\Producto.js",["197"],"import React from 'react';\r\nimport Canje from '../canje/Canje';\r\nimport DeleteProduct from './DeleteProduct';\r\n\r\nconst Producto = (props) => {\r\n\r\n    const { id, nombre, urlImage, puntos, descripcion } = props.producto\r\n    return (\r\n        <div className=\"col-12 col-sm-6 col-md-4 col-lg-3 mb-4\">\r\n            <div className=\"card\">\r\n                <img src={urlImage} className=\"card-img-top\" />\r\n                <div className=\"card-body\">\r\n                    <p className=\"card-text\">{nombre}</p>\r\n                    <p className=\"card-text\">{descripcion}</p>\r\n                    <p className=\"card-text\">{puntos} Puntos</p>\r\n                    <Canje \r\n                        productId={id}\r\n                        puntos={puntos} />\r\n                        <p></p>\r\n                    <DeleteProduct \r\n                        productId={id}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Producto;","C:\\Users\\Ponte\\Documents\\Proyecto Final Python\\inspire\\inspire-frontend\\src\\components\\transactions\\AddTransaction.js",["198","199","200","201","202","203","204"],"import React, { useState, useEffect } from 'react';\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Form, FormGroup, Label, Input } from 'reactstrap';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport CODIGO_HTTP from '../../utils/Utils';\r\nimport swal from 'sweetalert';\r\n\r\nconst AddTransaction = () => {\r\n\r\n    let history = useHistory();\r\n\r\n    const [members, setMembers] = useState([])\r\n\r\n    const [products, setProducts] = useState([])\r\n  \r\n    useEffect(() => {\r\n      if (!localStorage.getItem('token')) {\r\n        return history.push('/login'); }\r\n    else {\r\n        getMembers();\r\n        getProducts();\r\n        console.log(\"Miembros: \", members)\r\n        } }, [])\r\n  \r\n    const [modal, setModal] = useState(false);\r\n  \r\n    const [transaction, setTransaction] = useState({ \r\n        tipo: \"\",\r\n        monto: \"\",\r\n        id_miembro: \"\",\r\n        descripcion: \"\",\r\n        puntos: \"\",\r\n        id_producto: \"\"\r\n    });\r\n  \r\n    const cleanForm = () => { setTransaction({      \r\n        tipo: \"\",\r\n        monto: \"\",\r\n        id_miembro: \"\",\r\n        descripcion: \"\",\r\n        puntos: \"\",\r\n        id_producto: \"\"\r\n    })}\r\n\r\n    const getMembers = async () => {\r\n        let response = await fetch('http://localhost:5000/members', {\r\n            method: \"GET\"\r\n        });\r\n\r\n        response = await response.json();\r\n        console.log(\"Response: \", response);\r\n        setMembers(response.miembros);\r\n    }\r\n\r\n    const getProducts = async () => {\r\n        let response = await fetch('http://localhost:5000/products', {\r\n            method: \"GET\"\r\n        });\r\n        response = await response.json();\r\n        console.log(\"Response: \", response);\r\n        setProducts(response.productos);\r\n    }\r\n  \r\n    const toggle = () => {\r\n        cleanForm();\r\n        setModal(!modal);\r\n    }\r\n    \r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n        const fieldsOk = await checkFieldsRequireds()\r\n        if (fieldsOk) {\r\n        generateTransaction().then(transaccion => { toggle();\r\n                    console.log(transaccion)\r\n                   getMember(transaccion).then(\r\n                       member => {updateMemberPoints(member, transaccion).then(() => swal(\"Bien!\", \"Se ha generado la transacción con éxito\", \"success\").then(() => window.location.reload()) )})\r\n            })\r\n        } else {\r\n            swal(\"Error\", \"Tipo Acumulo: Complete el monto \\n Tipo Canje: Complete el producto\", \"error\")\r\n        }\r\n    } \r\n\r\n    const checkFieldsRequireds = async () => {\r\n        if (!tipo) {\r\n            return false\r\n        } \r\n        if (tipo == \"Acumulo\" && monto == \"\") {\r\n            return false\r\n        } \r\n        if (tipo == \"Canje\" && id_producto == \"\") {\r\n            return false\r\n        }\r\n        return true\r\n    }\r\n\r\n  const getMember = async (transaccion) => {\r\n      console.log(transaccion)\r\n      var id_miembro = transaccion.miembro.id\r\n    console.log(id_miembro)\r\n    let response = await fetch(`http://localhost:5000/members/${id_miembro}`, {\r\n        method: \"GET\",\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }})\r\n        response = await response.json();\r\n        if (response.code == CODIGO_HTTP.OK) {\r\n            console.log(\"Miembro filtrado: \", response.miembro)\r\n            return response.miembro\r\n        } else {\r\n            swal(\"Error\", response.mensaje, \"error\")\r\n        }\r\n}\r\n\r\n    const generateTransaction = async () => {\r\n        let response = await fetch('http://localhost:5000/transactions', {\r\n        method: \"POST\",\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(transaction)\r\n    })\r\n        console.log(JSON.stringify(transaction))\r\n        response = await response.json();\r\n        console.log(response)\r\n        if (response.code == CODIGO_HTTP.CREATED) {\r\n            return response.transaccion \r\n        } else {\r\n            swal(\"Error\", \"No se pudo crear la tranacción\", \"error\")\r\n        }   \r\n    }\r\n\r\n    const updateMemberPoints = async (member, transaction) => {\r\n        console.log(\"Puntos para actualizar: \", transaction.puntos)\r\n\r\n        var payload = {\r\n            nombre: member.nombre,\r\n            apellido: member.apellido,\r\n            email: member.email,\r\n            fecha_de_nacimiento: member.fecha_de_nacimiento,\r\n            estado: member.estado,\r\n            comentario: member.comentario,\r\n            puntos: member.puntos + transaction.puntos\r\n        }\r\n        console.log(payload)\r\n        let response = await fetch(`http://localhost:5000/members/${member.id}`, {\r\n        method: \"PUT\",\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(payload)})\r\n\r\n        console.log(JSON.stringify(payload))\r\n        console.log(JSON.stringify(response))\r\n    }\r\n    \r\n    const { tipo, monto, id_miembro, id_producto, descripcion } = transaction;\r\n      \r\n    const onInputChange = e => {\r\n        setTransaction({...transaction, [e.target.name]: e.target.value})\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Button className=\"btn btn-primary btn-add\" color=\"btn btn-primary\" onClick={toggle}>Crear Transacción</Button>\r\n            <Modal isOpen={modal}>\r\n            <Form id=\"formAddTransaction\" onSubmit={handleSubmit}>\r\n                <ModalHeader>Crear Transacción</ModalHeader>\r\n                <ModalBody>\r\n                        <FormGroup>\r\n                            <Label for=\"txtType\">Tipo</Label>\r\n                            <Input type=\"select\" id=\"txtType\" name=\"tipo\" placeholder=\"Tipo de transacción\" value={tipo} onChange={e => onInputChange(e)} required>\r\n                                <option value=\"\">Elige una opción</option>\r\n                                <option value=\"Acumulo\">Acumulo</option>\r\n                                <option value=\"Canje\">Canje</option>\r\n                            </Input>\r\n                        </FormGroup>\r\n                        <FormGroup>\r\n                            <Label for=\"txtAmount\">Monto</Label>\r\n                            <Input type=\"text\" id=\"txtAmount\" name=\"monto\" placeholder=\"Monto de transacción\" value={monto} onChange={e => onInputChange(e)} />\r\n                        </FormGroup>\r\n                        <FormGroup>\r\n                            <Label for=\"txtMember\">Miembro</Label>\r\n                            <Input type=\"select\" id=\"txtMember\" name=\"id_miembro\" placeholder=\"Miembro de transacción\" value={id_miembro} onChange={e => onInputChange(e)} required >\r\n                                <option value=\"\">Elige una opción</option>\r\n                                {members.map((member) => (<option value={member.id}>{member.nombre} {member.apellido}</option>))}\r\n                            </Input>\r\n                        </FormGroup>\r\n                        <FormGroup>\r\n                            <Label for=\"txtProduct\">Producto</Label>\r\n                            <Input type=\"select\" id=\"txtProduct\" name=\"id_producto\" placeholder=\"Producto de transacción\" value={id_producto} onChange={e => onInputChange(e)} >\r\n                                <option value=\"\">Elige una opción</option>\r\n                                {products.map((product) => (<option value={product.id}>{product.nombre}</option>))}\r\n                            </Input>\r\n                        </FormGroup>\r\n                        <FormGroup>\r\n                            <Label for=\"txtDescription\">Descripción</Label>\r\n                            <Input type=\"textbox\" id=\"txtDescription\" name=\"descripcion\" placeholder=\"Descripción de transacción\" value={descripcion} onChange={e => onInputChange(e)} />\r\n                        </FormGroup>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button color=\"primary\" type=\"submit\">Aceptar</Button>\r\n                    <Button color=\"secondary\" onClick={toggle}>Cancel</Button>\r\n                </ModalFooter>\r\n                </Form>\r\n            </Modal>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AddTransaction;","C:\\Users\\Ponte\\Documents\\Proyecto Final Python\\inspire\\inspire-frontend\\src\\components\\vouchers\\VouchersTable.js",[],"C:\\Users\\Ponte\\Documents\\Proyecto Final Python\\inspire\\inspire-frontend\\src\\utils\\Utils.js",[],"C:\\Users\\Ponte\\Documents\\Proyecto Final Python\\inspire\\inspire-frontend\\src\\components\\canje\\Canje.js",["205","206"],"import React from 'react';\r\nimport { Button } from 'reactstrap';\r\nimport swal from 'sweetalert';\r\nimport jwt_decode from 'jwt-decode';\r\nimport CODIGO_HTTP from '../../utils/Utils'\r\n\r\nconst Canje = (props) => {\r\n\r\n    const { productId, puntos } = props\r\n\r\n    const trade = async () => {\r\n        var token = localStorage.getItem('token')\r\n        var decoded = jwt_decode(token);\r\n\r\n        getMember(decoded.email).then(r => {\r\n        console.log(r)\r\n        if (checkPoints(r.puntos)) {\r\n            generateTradeTransaction(r.id).then(trx => {\r\n                updateMemberPoints(r)\r\n                generateMemberVoucher(r).then(voucher => { \r\n                    console.log(voucher)\r\n                    swal(\"¡El canje se ha realizado con éxito!\", `Se generó el voucher con número: ${voucher.id} \\n Se restaron: ${puntos} puntos`, \"success\") }\r\n            )})\r\n        } else {\r\n            swal(\"Error\", \"No tiene los puntos suficientes para poder canjear\", \"error\")\r\n        }\r\n        });\r\n    }\r\n\r\n    const getMember = async (email) => {\r\n        console.log(email)\r\n        let response = await fetch(`http://localhost:5000/members?email=${email}`, {\r\n            method: \"GET\"\r\n          });\r\n            response = await response.json();\r\n            console.log(response)\r\n            if (response.code == CODIGO_HTTP.OK) {\r\n                console.log(\"Miembro filtrado: \", response.miembros[0])\r\n                return response.miembros[0]\r\n            } else {\r\n                swal(\"Error\", response.mensaje, \"error\")\r\n            }\r\n    }\r\n\r\n    const checkPoints = (puntosMiembro) => {\r\n        console.log(puntosMiembro)\r\n        console.log(puntos)\r\n        if (puntosMiembro > 0 && puntosMiembro >= puntos) {\r\n            return true\r\n        } else {\r\n            return false\r\n        }\r\n    }\r\n\r\n    const generateTradeTransaction = async (id_miembro) => {\r\n        var payload = {\r\n            id_miembro,\r\n            puntos,\r\n            tipo: \"Canje\",\r\n            descripcion: \"Transacción generada automaticamente por canje de producto\",\r\n            monto: 0,\r\n            id_producto: productId\r\n        }\r\n        \r\n        console.log(payload)\r\n        let response = await fetch('http://localhost:5000/transactions', {\r\n        method: \"POST\",\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(payload)})\r\n\r\n        console.log(JSON.stringify(payload))\r\n        console.log(response)\r\n    }\r\n\r\n    const updateMemberPoints = async (member) => {\r\n        var puntosParaActualizar = member.puntos - puntos\r\n        console.log(\"Puntos para actualizar: \", puntosParaActualizar)\r\n        var payload = {\r\n            nombre: member.nombre,\r\n            apellido: member.apellido,\r\n            email: member.email,\r\n            fecha_de_nacimiento: member.fecha_de_nacimiento,\r\n            estado: member.estado,\r\n            comentario: member.comentario,\r\n            puntos: puntosParaActualizar\r\n        }\r\n        console.log(payload)\r\n        let response = await fetch(`http://localhost:5000/members/${member.id}`, {\r\n        method: \"PUT\",\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(payload)})\r\n\r\n        console.log(JSON.stringify(payload))\r\n        console.log(JSON.stringify(response))\r\n    }\r\n\r\n    const generateMemberVoucher = async (member) => {\r\n        var payload = {\r\n            id_producto: productId,\r\n            id_miembro: member.id \r\n        }\r\n        console.log(\"Member de voucher\", member)\r\n        console.log(\"Payload de Crear Voucher: \", payload)\r\n\r\n        let response = await fetch('http://localhost:5000/vouchers', {\r\n        method: \"POST\",\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(payload)})\r\n        response = await response.json();\r\n\r\n        if (response.code == CODIGO_HTTP.CREATED) {\r\n            return response.voucher\r\n        } else {\r\n            swal(\"Error\", response.mensaje, \"error\")\r\n        }\r\n    }\r\n\r\n    const toggle = () => {\r\n        swal({\r\n            title: \"¿Estás seguro?\",\r\n            text: \"Una vez canjeado, no se podrán devolver los puntos\",\r\n            icon: \"warning\",\r\n            buttons: true,\r\n            dangerMode: true,\r\n          })\r\n          .then((willTrade) => {\r\n            if (willTrade) {\r\n                trade()\r\n            }\r\n          });\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Button className=\"btn btn-primary btn-block\" color=\"btn-primary\" onClick={toggle}>Canjear</Button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Canje;",["207","208"],"C:\\Users\\Ponte\\Documents\\Proyecto Final Python\\inspire\\inspire-frontend\\src\\components\\products\\AddProduct.js",["209"],"import React, { useState } from 'react';\r\nimport swal from 'sweetalert';\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Form, FormGroup, Label, Input } from 'reactstrap';\r\nimport CODIGO_HTTP from '../../utils/Utils';\r\n\r\nconst AddProduct = () => {\r\n\r\n    const [product, setProduct] = useState({\r\n        nombre: \"\",\r\n        descripcion: \"\",\r\n        puntos: \"\",\r\n        urlImage: \"\"\r\n    })\r\n\r\n    const [modal, setModal] = useState(false);\r\n\r\n    const toggle = () => {\r\n        setModal(!modal);\r\n    }\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n        let response = await fetch('http://localhost:5000/products', {\r\n            method: \"POST\",\r\n            headers: {\r\n              'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(product)\r\n        })\r\n            response = await response.json();\r\n            if (response.code == CODIGO_HTTP.CREATED) {\r\n                swal(\"Bien!\", \"Se agregó el nuevo producto al catálogo!\", \"success\").then(() => {\r\n                    window.location.reload();\r\n                })\r\n            } else {\r\n                swal(\"Error\", \"No se pudo crear la tranacción\", \"error\")\r\n            } \r\n    }   \r\n\r\n    const { nombre, descripcion, puntos, urlImage } = product\r\n\r\n    const onInputChange = e => {\r\n        setProduct({...product, [e.target.name]: e.target.value})\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Button className=\"btn btn-primary btn-add\" color=\"btn btn-primary\" id=\"btn-add-product\" onClick={toggle}>Agregar Producto</Button>\r\n            <Modal isOpen={modal}>\r\n            <Form id=\"formAddProduct\" onSubmit={handleSubmit}>\r\n                <ModalHeader>Agregar Producto</ModalHeader>\r\n                <ModalBody>\r\n                        <FormGroup>\r\n                            <Label for=\"productName\">Nombre</Label>\r\n                            <Input type=\"text\" id=\"productName\" name=\"nombre\" placeholder=\"Nombre de producto\" value={nombre} onChange={e => onInputChange(e)} required/>\r\n                        </FormGroup>\r\n                        <FormGroup>\r\n                            <Label for=\"productDescription\">Descripción</Label>\r\n                            <Input type=\"text\" id=\"productDescription\" name=\"descripcion\" placeholder=\"Descripción de producto\" value={descripcion} onChange={e => onInputChange(e)} required />\r\n                        </FormGroup>\r\n                        <FormGroup>\r\n                            <Label for=\"productPoints\">Puntos</Label>\r\n                            <Input type=\"integer\" id=\"productPoints\" name=\"puntos\" placeholder=\"Puntos de producto\" value={puntos} onChange={e => onInputChange(e)} required/>\r\n                        </FormGroup>\r\n                        <FormGroup>\r\n                            <Label for=\"productURLImage\">Imagen URL</Label>\r\n                            <Input type=\"text\" id=\"productURLImage\" name=\"urlImage\" placeholder=\"URL de la imagen de producto\" value={urlImage} onChange={e => onInputChange(e)} required/>\r\n                        </FormGroup>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button color=\"primary\" type=\"submit\">Aceptar</Button>\r\n                    <Button color=\"secondary\" onClick={toggle}>Cancel</Button>\r\n                </ModalFooter>\r\n                </Form>\r\n            </Modal>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AddProduct;","C:\\Users\\Ponte\\Documents\\Proyecto Final Python\\inspire\\inspire-frontend\\src\\components\\products\\DeleteProduct.js",["210"],"import React from 'react';\r\nimport swal from 'sweetalert';\r\nimport CODIGO_HTTP from '../../utils/Utils'\r\nimport { Button } from 'reactstrap';\r\n\r\nconst DeleteProduct = (props) => {\r\n    \r\n    const { productId } = props\r\n\r\n    const deleteProduct = async () => {\r\n        let response = await fetch(`http://localhost:5000/products/${productId}`, {\r\n            method: \"DELETE\",\r\n        });\r\n        response = await response.json();\r\n        if (response.code == CODIGO_HTTP.OK) {\r\n            swal(\"Bien!\", \"Producto eliminado con éxito!\", \"success\").then(() => window.location.reload());\r\n        } else {\r\n            swal(\"Error\", response.mensaje, \"error\")\r\n        }\r\n    }\r\n\r\n    const toggle = () => {\r\n        swal({\r\n            title: \"¿Estás seguro?\",\r\n            text: \"Una vez eliminado, no se podrá recuperar el producto\",\r\n            icon: \"warning\",\r\n            buttons: true,\r\n            dangerMode: true,\r\n          })\r\n          .then((willDelete) => {\r\n            if (willDelete) {\r\n                deleteProduct()\r\n            }\r\n          });\r\n    }\r\n\r\n    return (\r\n        <div>\r\n             <Button className=\"btn btn-primary btn-block\" color=\"danger\" onClick={toggle}>Eliminar</Button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DeleteProduct;",{"ruleId":"211","replacedBy":"212"},{"ruleId":"213","replacedBy":"214"},{"ruleId":"215","severity":1,"message":"216","line":13,"column":21,"nodeType":"217","endLine":13,"endColumn":107},{"ruleId":"215","severity":1,"message":"216","line":17,"column":21,"nodeType":"217","endLine":17,"endColumn":113},{"ruleId":"215","severity":1,"message":"216","line":19,"column":25,"nodeType":"217","endLine":19,"endColumn":116},{"ruleId":"215","severity":1,"message":"216","line":20,"column":25,"nodeType":"217","endLine":20,"endColumn":113},{"ruleId":"215","severity":1,"message":"216","line":23,"column":25,"nodeType":"217","endLine":23,"endColumn":124},{"ruleId":"218","severity":1,"message":"219","line":24,"column":12,"nodeType":"220","messageId":"221","endLine":24,"endColumn":31},{"ruleId":"218","severity":1,"message":"222","line":26,"column":11,"nodeType":"220","messageId":"221","endLine":26,"endColumn":20},{"ruleId":"223","severity":1,"message":"224","line":36,"column":42,"nodeType":"225","messageId":"226","endLine":36,"endColumn":44},{"ruleId":"227","severity":1,"message":"228","line":42,"column":8,"nodeType":"229","endLine":42,"endColumn":10,"suggestions":"230"},{"ruleId":"223","severity":1,"message":"224","line":79,"column":31,"nodeType":"225","messageId":"226","endLine":79,"endColumn":33},{"ruleId":"223","severity":1,"message":"224","line":27,"column":38,"nodeType":"225","messageId":"226","endLine":27,"endColumn":40},{"ruleId":"227","severity":1,"message":"231","line":33,"column":8,"nodeType":"229","endLine":33,"endColumn":10,"suggestions":"232"},{"ruleId":"223","severity":1,"message":"224","line":61,"column":39,"nodeType":"225","messageId":"226","endLine":61,"endColumn":41},{"ruleId":"233","severity":1,"message":"234","line":84,"column":51,"nodeType":"235","messageId":"236","endLine":84,"endColumn":53},{"ruleId":"223","severity":1,"message":"224","line":27,"column":27,"nodeType":"225","messageId":"226","endLine":27,"endColumn":29},{"ruleId":"223","severity":1,"message":"224","line":39,"column":32,"nodeType":"225","messageId":"226","endLine":39,"endColumn":34},{"ruleId":"227","severity":1,"message":"231","line":55,"column":8,"nodeType":"229","endLine":55,"endColumn":10,"suggestions":"237"},{"ruleId":"227","severity":1,"message":"231","line":13,"column":42,"nodeType":"229","endLine":13,"endColumn":44,"suggestions":"238"},{"ruleId":"218","severity":1,"message":"239","line":41,"column":9,"nodeType":"220","messageId":"221","endLine":41,"endColumn":17},{"ruleId":"223","severity":1,"message":"224","line":53,"column":23,"nodeType":"225","messageId":"226","endLine":53,"endColumn":25},{"ruleId":"223","severity":1,"message":"224","line":80,"column":23,"nodeType":"225","messageId":"226","endLine":80,"endColumn":25},{"ruleId":"227","severity":1,"message":"240","line":23,"column":8,"nodeType":"229","endLine":23,"endColumn":10,"suggestions":"241"},{"ruleId":"223","severity":1,"message":"224","line":50,"column":27,"nodeType":"225","messageId":"226","endLine":50,"endColumn":29},{"ruleId":"218","severity":1,"message":"242","line":4,"column":8,"nodeType":"220","messageId":"221","endLine":4,"endColumn":25},{"ruleId":"223","severity":1,"message":"224","line":29,"column":38,"nodeType":"225","messageId":"226","endLine":29,"endColumn":40},{"ruleId":"227","severity":1,"message":"231","line":36,"column":8,"nodeType":"229","endLine":36,"endColumn":10,"suggestions":"243"},{"ruleId":"233","severity":1,"message":"234","line":70,"column":68,"nodeType":"235","messageId":"236","endLine":70,"endColumn":70},{"ruleId":"223","severity":1,"message":"224","line":25,"column":38,"nodeType":"225","messageId":"226","endLine":25,"endColumn":40},{"ruleId":"227","severity":1,"message":"231","line":31,"column":8,"nodeType":"229","endLine":31,"endColumn":10,"suggestions":"244"},{"ruleId":"233","severity":1,"message":"234","line":64,"column":56,"nodeType":"235","messageId":"236","endLine":64,"endColumn":58},{"ruleId":"223","severity":1,"message":"224","line":28,"column":38,"nodeType":"225","messageId":"226","endLine":28,"endColumn":40},{"ruleId":"227","severity":1,"message":"245","line":34,"column":8,"nodeType":"229","endLine":34,"endColumn":10,"suggestions":"246"},{"ruleId":"223","severity":1,"message":"224","line":42,"column":27,"nodeType":"225","messageId":"226","endLine":42,"endColumn":29},{"ruleId":"223","severity":1,"message":"224","line":63,"column":27,"nodeType":"225","messageId":"226","endLine":63,"endColumn":29},{"ruleId":"223","severity":1,"message":"247","line":69,"column":49,"nodeType":"225","messageId":"226","endLine":69,"endColumn":51},{"ruleId":"223","severity":1,"message":"224","line":28,"column":38,"nodeType":"225","messageId":"226","endLine":28,"endColumn":40},{"ruleId":"227","severity":1,"message":"231","line":33,"column":8,"nodeType":"229","endLine":33,"endColumn":10,"suggestions":"248"},{"ruleId":"233","severity":1,"message":"234","line":59,"column":56,"nodeType":"235","messageId":"236","endLine":59,"endColumn":58},{"ruleId":"223","severity":1,"message":"224","line":27,"column":42,"nodeType":"225","messageId":"226","endLine":27,"endColumn":44},{"ruleId":"227","severity":1,"message":"249","line":33,"column":8,"nodeType":"229","endLine":33,"endColumn":10,"suggestions":"250"},{"ruleId":"223","severity":1,"message":"224","line":41,"column":27,"nodeType":"225","messageId":"226","endLine":41,"endColumn":29},{"ruleId":"223","severity":1,"message":"224","line":65,"column":27,"nodeType":"225","messageId":"226","endLine":65,"endColumn":29},{"ruleId":"223","severity":1,"message":"247","line":72,"column":45,"nodeType":"225","messageId":"226","endLine":72,"endColumn":47},{"ruleId":"227","severity":1,"message":"251","line":12,"column":7,"nodeType":"229","endLine":12,"endColumn":9,"suggestions":"252"},{"ruleId":"227","severity":1,"message":"251","line":12,"column":7,"nodeType":"229","endLine":12,"endColumn":9,"suggestions":"253"},{"ruleId":"227","severity":1,"message":"251","line":12,"column":7,"nodeType":"229","endLine":12,"endColumn":9,"suggestions":"254"},{"ruleId":"218","severity":1,"message":"255","line":1,"column":46,"nodeType":"220","messageId":"221","endLine":1,"endColumn":61},{"ruleId":"218","severity":1,"message":"256","line":10,"column":12,"nodeType":"220","messageId":"221","endLine":10,"endColumn":26},{"ruleId":"218","severity":1,"message":"257","line":41,"column":13,"nodeType":"220","messageId":"221","endLine":41,"endColumn":32},{"ruleId":"223","severity":1,"message":"224","line":77,"column":29,"nodeType":"225","messageId":"226","endLine":77,"endColumn":31},{"ruleId":"258","severity":1,"message":"259","line":93,"column":13,"nodeType":"217","endLine":93,"endColumn":47},{"ruleId":"215","severity":1,"message":"216","line":11,"column":17,"nodeType":"217","endLine":11,"endColumn":64},{"ruleId":"227","severity":1,"message":"260","line":22,"column":14,"nodeType":"229","endLine":22,"endColumn":16,"suggestions":"261"},{"ruleId":"223","severity":1,"message":"224","line":87,"column":18,"nodeType":"225","messageId":"226","endLine":87,"endColumn":20},{"ruleId":"223","severity":1,"message":"224","line":87,"column":40,"nodeType":"225","messageId":"226","endLine":87,"endColumn":42},{"ruleId":"223","severity":1,"message":"224","line":90,"column":18,"nodeType":"225","messageId":"226","endLine":90,"endColumn":20},{"ruleId":"223","severity":1,"message":"224","line":90,"column":44,"nodeType":"225","messageId":"226","endLine":90,"endColumn":46},{"ruleId":"223","severity":1,"message":"224","line":106,"column":27,"nodeType":"225","messageId":"226","endLine":106,"endColumn":29},{"ruleId":"223","severity":1,"message":"224","line":125,"column":27,"nodeType":"225","messageId":"226","endLine":125,"endColumn":29},{"ruleId":"223","severity":1,"message":"224","line":37,"column":31,"nodeType":"225","messageId":"226","endLine":37,"endColumn":33},{"ruleId":"223","severity":1,"message":"224","line":117,"column":27,"nodeType":"225","messageId":"226","endLine":117,"endColumn":29},{"ruleId":"211","replacedBy":"262"},{"ruleId":"213","replacedBy":"263"},{"ruleId":"223","severity":1,"message":"224","line":31,"column":31,"nodeType":"225","messageId":"226","endLine":31,"endColumn":33},{"ruleId":"223","severity":1,"message":"224","line":15,"column":27,"nodeType":"225","messageId":"226","endLine":15,"endColumn":29},"no-native-reassign",["264"],"no-negated-in-lhs",["265"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'emailOriginalMember' is assigned a value but never used.","Identifier","unusedVar","'cleanForm' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'history' and 'loadMember'. Either include them or remove the dependency array.","ArrayExpression",["266"],"React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["267"],"array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd",["268"],["269"],"'onSubmit' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'verifyRoute'. Either include it or remove the dependency array.",["270"],"'SearchTransaction' is defined but never used.",["271"],["272"],"React Hook useEffect has missing dependencies: 'history', 'loadTransactionAdmin', and 'loadTransactionUser'. Either include them or remove the dependency array.",["273"],"Expected '!==' and instead saw '!='.",["274"],"React Hook useEffect has missing dependencies: 'history', 'loadVoucherAdmin', and 'loadVoucherUser'. Either include them or remove the dependency array.",["275"],"React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.",["276"],["277"],["278"],"'useLayoutEffect' is defined but never used.","'fieldRequireds' is assigned a value but never used.","'checkFieldsRequired' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","React Hook useEffect has missing dependencies: 'history' and 'members'. Either include them or remove the dependency array.",["279"],["264"],["265"],"no-global-assign","no-unsafe-negation",{"desc":"280","fix":"281"},{"desc":"282","fix":"283"},{"desc":"282","fix":"284"},{"desc":"282","fix":"285"},{"desc":"286","fix":"287"},{"desc":"282","fix":"288"},{"desc":"282","fix":"289"},{"desc":"290","fix":"291"},{"desc":"282","fix":"292"},{"desc":"293","fix":"294"},{"desc":"295","fix":"296"},{"desc":"295","fix":"297"},{"desc":"295","fix":"298"},{"desc":"299","fix":"300"},"Update the dependencies array to be: [history, loadMember]",{"range":"301","text":"302"},"Update the dependencies array to be: [history]",{"range":"303","text":"304"},{"range":"305","text":"304"},{"range":"306","text":"304"},"Update the dependencies array to be: [verifyRoute]",{"range":"307","text":"308"},{"range":"309","text":"304"},{"range":"310","text":"304"},"Update the dependencies array to be: [history, loadTransactionAdmin, loadTransactionUser]",{"range":"311","text":"312"},{"range":"313","text":"304"},"Update the dependencies array to be: [history, loadVoucherAdmin, loadVoucherUser]",{"range":"314","text":"315"},"Update the dependencies array to be: [id]",{"range":"316","text":"317"},{"range":"318","text":"317"},{"range":"319","text":"317"},"Update the dependencies array to be: [history, members]",{"range":"320","text":"321"},[1394,1396],"[history, loadMember]",[1024,1026],"[history]",[1772,1774],[458,460],[653,655],"[verifyRoute]",[1173,1175],[952,954],[1042,1044],"[history, loadTransactionAdmin, loadTransactionUser]",[984,986],[1060,1062],"[history, loadVoucherAdmin, loadVoucherUser]",[307,309],"[id]",[314,316],[286,288],[693,695],"[history, members]"]